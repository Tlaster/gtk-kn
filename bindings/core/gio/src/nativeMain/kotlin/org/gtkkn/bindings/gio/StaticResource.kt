// This is a generated file. Do not modify.
package org.gtkkn.bindings.gio

import kotlinx.cinterop.CPointed
import kotlinx.cinterop.CPointer
import kotlinx.cinterop.reinterpret
import org.gtkkn.bindings.gio.annotations.GioVersion2_32
import org.gtkkn.extensions.glib.Record
import org.gtkkn.extensions.glib.RecordCompanion
import org.gtkkn.native.gio.GStaticResource
import org.gtkkn.native.gio.g_static_resource_fini
import org.gtkkn.native.gio.g_static_resource_get_resource
import org.gtkkn.native.gio.g_static_resource_init
import kotlin.Unit

/**
 * #GStaticResource is an opaque data structure and can only be accessed
 * using the following functions.
 *
 * ## Skipped during bindings generation
 *
 * - field `data`: Record field data is private
 * - field `data_len`: Record field data_len is private
 * - field `resource`: Record field resource is private
 * - field `next`: Record field next is private
 * - field `padding`: Record field padding is private
 */
public class StaticResource(
    pointer: CPointer<GStaticResource>,
) : Record {
    public val gioStaticResourcePointer: CPointer<GStaticResource> = pointer

    /**
     * Finalized a GResource initialized by g_static_resource_init().
     *
     * This is normally used by code generated by
     * [glib-compile-resources][glib-compile-resources]
     * and is not typically used by other code.
     *
     * @since 2.32
     */
    @GioVersion2_32
    public fun fini(): Unit = g_static_resource_fini(gioStaticResourcePointer.reinterpret())

    /**
     * Gets the GResource that was registered by a call to g_static_resource_init().
     *
     * This is normally used by code generated by
     * [glib-compile-resources][glib-compile-resources]
     * and is not typically used by other code.
     *
     * @return a #GResource
     * @since 2.32
     */
    @GioVersion2_32
    public fun getResource(): Resource =
        g_static_resource_get_resource(gioStaticResourcePointer.reinterpret())!!.run {
            Resource(reinterpret())
        }

    /**
     * Initializes a GResource from static data using a
     * GStaticResource.
     *
     * This is normally used by code generated by
     * [glib-compile-resources][glib-compile-resources]
     * and is not typically used by other code.
     *
     * @since 2.32
     */
    @GioVersion2_32
    public fun `init`(): Unit = g_static_resource_init(gioStaticResourcePointer.reinterpret())

    public companion object : RecordCompanion<StaticResource, GStaticResource> {
        override fun wrapRecordPointer(pointer: CPointer<out CPointed>): StaticResource =
            StaticResource(pointer.reinterpret())
    }
}
